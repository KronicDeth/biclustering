-- License --

Parallel Biclustering Algorithm - Fast Algorithm for finding all biclusters in a GEM
Copyright (C) 2006  Luke Imhoff

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Contact Info:
  Luke Imhoff (imho0030@umn.edu)
  3480 Golfview Dr Apt 1208
  Eagan, MN 55123

-- Dependencies --

python
pytables (>= 1.3 has numpy support)
numpy
pyrex

-- Build --

python setup.py install

-- Running --

launch python as an interactive shell in src/python :

> python

The top level interface can be accessed through the GeneExpressionMatrix module:

import Biclustering.GeneExpressionMatrix

Data must be passed in as a numpy array.  However, pytables uses HDF5 data
format and MATLAB supports HDF5, so it is possible to save data in MATLAB
and load it with pytables:

in MATLAB:

load yeastdataclean.mat
% Ac is name of array in the .mat
hdf5write('yeastdataclean.h5', '/yeast', Ac)

in python:

import tables
fileh = tables.openFile('../../data/yeastdataclean.h5')
data = fileh.root.yeast[:]
import numpy
data = numpy.asarray(data)
data = data.astype(numpy.uint32)
import Biclustering.GeneExpressionMatrix
gem = Biclustering.GeneExpressionMatrix.GeneExpressionMatrix("clean-yeast", data, "~/")

Here the GEM and biclusters will be saved to a file ~/clean-yeast.gem The path
is optional ("~/") and the extension is automatic.

Pytables automatically handles file closing if you exit the python shell with Ctrl+D.
You can reopen a GEM by passing None for data

gem = Biclustering.GeneExpressionMatrix.GeneExpressionMatrix("clean-yeast", None, "~/")

gem.allBiclusters() will find all biclusters.  It's a good guide for the order of
calls to the PBA.  All 2 condition biclusters must be found first as a seed:

gem.splitBiclusters()

This will deposit all biclusters into a pool under /biclusters/width2 in the file
Before the biclusters can be chained (grown), the pool must be indexed.  This
speeds up the chaining considerably and gem.chainBiclusters() will not work without
indexing first:

gem.indexBiclusters(2)

PBA can currently chain biclusters in 2 ways, either a full direct chaining by
chaining a given width with 2 condition (width 2) biclusters.  This is used to
find all biclusters:

gem.chainBiclusters(width)

The result biclusters are of width (width + 1).  Chaining always loses a condition
from the size of the combined biclusters because the biclusters are chained using
a 'link' that is the shared condition index.

If your analysis has a minimum number of conditions necessary for a valid bicluster,
then growing the biclusters by only 1 condition may take too long. chainBiclusters()
can also be used in doubling mode, which chains biclusters of the same width together.

gem.chainBiclusters(width, doubling = True)

Doubling chains result in biclusters of width (2 * width -1).

There is also a pruneBiclusters(width) function which can be used to determine
which biclusters are completely contained within biclusters of width + 1:

gem.pruneBicluster(width)

This will mark all biclusters of width 2 that are completely contained in
biclusters of width 3 as nested.  Stats can be accessed with

print gem.stats()

which will report the number of bicluster and the number of non-nested
biclusters in each width.  Until pruneBiclusters() is run, the the
non-nested count only reflects those biclusters which could be marked
as nested during the chaining (those for which the gene set did not shrink)

-- Examples --

Example scripts used during development are included in data/testing.txt


-- Questions, Comments, Problem --

Any question, comment, or problem can be directed to Luke Imhoff
(see above contact info)
